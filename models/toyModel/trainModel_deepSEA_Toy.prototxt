#depSEA caffe model prototxt

name: "deepSEA"

layer {
  name: "data"
  type: "HDF5Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  hdf5_data_param {
    source: "/scratch0/sem4/cmsc702/deepSEA/deepSEA_caffe/caffeSEA/data/hdf5ToyDir/train.txt"
    #backend: HDF5
    batch_size: 64
  }
}


layer {
  name: "data"
  type: "HDF5Data"
  top: "data"
  top: "label"  
  include {
    phase: TEST
  }
  hdf5_data_param {
    source: "/scratch0/sem4/cmsc702/deepSEA/deepSEA_caffe/caffeSEA/data/hdf5ToyDir/test.txt"
    #backend: HDF5
    batch_size: 64
  }
}

#model:add(nn.SpatialConvolutionMM(nfeats, nkernels[1], 1, 8, 1, 1, 0):cuda())
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 320
    kernel_h: 8
    kernel_w: 1
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

#model:add(nn.Threshold(0, 1e-6):cuda())
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}

#model:add(nn.SpatialMaxPooling(1,4,1,4):cuda())
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_h: 4
    kernel_w: 1
    stride: 4
  }
}

#model:add(nn.Dropout(0.2):cuda())
layer {
  name: "drop1"
  type: "Dropout"
  bottom: "pool1"
  top: "drop1"
  dropout_param {
    dropout_ratio: 0.2
  }
}

#model:add(nn.SpatialConvolutionMM(nkernels[1], nkernels[2], 1, 8, 1, 1, 0):cuda())
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "drop1"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 480
    kernel_h: 8
    kernel_w: 1
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

#model:add(nn.Threshold(0, 1e-6):cuda())
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}

#model:add(nn.SpatialMaxPooling(1,4,1,4):cuda())
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_h: 4
    kernel_w: 1
    stride: 4
  }
}

#model:add(nn.Dropout(0.2):cuda())
layer {
  name: "drop2"
  type: "Dropout"
  bottom: "pool2"
  top: "drop2"
  dropout_param {
    dropout_ratio: 0.2
  }
}

#model:add(nn.SpatialConvolutionMM(nkernels[2], nkernels[3], 1, 8, 1, 1, 0):cuda())
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "drop2"
  top: "conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 960
    kernel_h: 8
    kernel_w: 1
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

#model:add(nn.Threshold(0, 1e-6):cuda())
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}

#model:add(nn.Dropout(0.5):cuda())
layer {
  name: "drop3"
  type: "Dropout"
  bottom: "conv3"
  top: "drop3"
  dropout_param {
    dropout_ratio: 0.5
  }
}


#width = 10000
#floor((floor((width-7)/4.0)-7)/4.0)-7 = 53
#nchannel = math.floor((math.floor((width-7)/4.0)-7)/4.0)-7
#model:add(nn.Reshape(nkernels[3]*nchannel))
#noutputs = 919

layer {
  name: "fc4"
  type: "InnerProduct"
  bottom: "drop3"
  top: "fc4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 919
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}


#model:add(nn.Threshold(0, 1e-6):cuda())
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "fc4"
  top: "fc4"
}

#model:add(nn.Linear(noutputs , noutputs):cuda())
layer {
  name: "fc5"
  type: "InnerProduct"
  bottom: "fc4"
  top: "fc5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 919
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}


#model:add(nn.Sigmoid():cuda()) 
layer {
  name: "sigmoid"
  bottom: "fc5"
  top: "sigmoid"
  type: "Sigmoid"
}


#use SigmoidCrossEntropyLossLayer for this line: criterion = nn.BCECriterion()
layer {
  name: "loss"
  type: "SIGMOID_CROSS_ENTROPY_LOSS"
  bottom: "sigmoid"
  bottom: "label"
  top: "loss"
}

#how to do: --L1 penalty to last layer (as mentioned in 3_loss.lua)
